//网页代码
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
const char *ssid = "username";
const char *password = "12345678";
ESP8266WebServer server(80);
String webPage = "";
/* 192.168.4.1 */
void handleRoot() {
  server.send(200, "text/html", "<h1>You are connected</h1>");
}

//定义显示屏
#include <Arduino.h>
#include <U8g2lib.h>
#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include <Wire.h>
#endif
#define SCL 5  //D1
#define SDA 4  //D2
U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0, /* clock=*/ SCL, /* data=*/ SDA, /* reset=*/ U8X8_PIN_NONE);

const unsigned char mi[]U8X8_PROGMEM = { 
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xf5,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0x1f,0x0a,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0x01,0xf8,0xff,0xff,0xff,0xff,0xff,0xe7,0x37,0xfc,0xff,0xff,0xff,
  0xff,0xff,0x3f,0xfe,0xe2,0xff,0xff,0xff,0xff,0xff,0x59,0xe5,0xf3,
  0xff,0xff,0xff,0xff,0xff,0xdf,0xb7,0x9d,0xff,0xff,0xff,0xff,0x7f,
  0xb6,0xd8,0xe5,0xff,0xff,0xff,0xff,0xff,0xa7,0xfd,0x32,0xfe,0xff,
  0xff,0xff,0xbf,0x6d,0x7f,0xdf,0xff,0xff,0xff,0xff,0xff,0xfb,0xd7,
  0xe7,0xfc,0xff,0x3f,0xff,0x9f,0x9b,0xea,0x9d,0xff,0xff,0xff,0xff,
  0xff,0x59,0xbd,0xce,0xf9,0xff,0xcf,0xff,0x6f,0xe5,0x5f,0xb7,0xff,
  0xff,0xff,0xff,0xff,0xfe,0xf7,0x5b,0xfb,0xff,0xf3,0xff,0xe7,0xb6,
  0xfa,0xbd,0xff,0xff,0xff,0xff,0xff,0x56,0x5d,0x97,0xf7,0xff,0xfc,
  0xff,0x5b,0xd9,0xaf,0x77,0xff,0xff,0xff,0xff,0x7f,0xfd,0xf7,0xbd,
  0xea,0x3f,0xff,0xfd,0xeb,0x7e,0xfd,0x6e,0xff,0xff,0xff,0xff,0xbf,
  0x57,0xbb,0x77,0xcd,0xcf,0x07,0xff,0x35,0xea,0xab,0xbb,0xfe,0xff,
  0xff,0xff,0xbf,0xfe,0xed,0x5e,0xdb,0xf7,0xf8,0xff,0x5c,0x5f,0xff,
  0xee,0xfe,0xff,0xff,0xff,0xbf,0x6b,0xbf,0x7b,0xd6,0x01,0x84,0xfe,
  0xb6,0xfb,0xed,0x7b,0xfd,0xff,0xff,0xff,0xdf,0xbe,0xeb,0xd6,0xba,
  0xfc,0x7b,0x71,0xad,0x6f,0xb7,0xee,0xfe,0xff,0xff,0xff,0xdf,0xeb,
  0xbe,0xff,0x16,0xab,0xae,0x4d,0x5b,0xbd,0xfd,0xbb,0xfd,0xff,0xff,
  0xff,0xaf,0xfe,0xfb,0xaa,0xfc,0x6d,0x7b,0x9b,0xd6,0xf7,0x57,0xef,
  0xfc,0xff,0xff,0xff,0xdf,0x5b,0xd7,0xff,0x56,0xdb,0xd6,0x76,0xcd,
  0xae,0xfe,0xbd,0xfd,0xff,0xff,0xff,0xef,0xee,0xbd,0xb6,0xda,0xb6,
  0xad,0xed,0xdb,0xfb,0xdb,0xf6,0xfd,0xff,0xff,0xff,0x6f,0xbb,0xfb,
  0x7b,0xb6,0x6d,0x7b,0x5b,0xcd,0x6e,0xef,0x5f,0xfd,0xff,0xff,0xff,
  0xef,0xef,0xaa,0x6e,0x6d,0xdb,0xd6,0xb6,0xdb,0xfb,0xbd,0xfa,0xfe,
  0xff,0xff,0xff,0xaf,0x7a,0xfb,0x3b,0xb7,0x6d,0xbb,0x6d,0xad,0x5e,
  0xf7,0xaf,0xfe,0xff,0xff,0xff,0xef,0xdf,0x6b,0xaf,0x2d,0xb6,0x6d,
  0xc1,0x9b,0xf7,0x5d,0xfb,0xfe,0xff,0xff,0xff,0x6f,0x7b,0xf3,0x5a,
  0xdb,0x6d,0xd7,0x5e,0xad,0x5d,0xf7,0xed,0xfe,0xff,0xff,0xff,0xef,
  0xed,0xd6,0xaf,0x4d,0xdb,0xbd,0xb5,0x7b,0xf7,0xdd,0xbf,0xfe,0xff,
  0xff,0xff,0x5f,0xdf,0x6f,0xe5,0xe6,0xb6,0x6a,0x2f,0xad,0xba,0x77,
  0x75,0xff,0xff,0xff,0xff,0xdf,0x75,0x95,0xb7,0xb5,0xed,0xb7,0x75,
  0xdb,0xee,0xdc,0x5f,0xff,0xff,0xff,0xff,0xdf,0xdf,0x3f,0x68,0x73,
  0x58,0x6d,0xd5,0xb6,0xbc,0x76,0xb5,0xff,0xff,0xff,0xff,0x9f,0x7a,
  0xeb,0xdd,0x2e,0x77,0xdb,0xaa,0xed,0x75,0xdd,0xbf,0xff,0xff,0xff,
  0xff,0xbf,0xef,0xfe,0xb4,0xdd,0xa7,0x6d,0x6e,0x5b,0x89,0xf7,0x96,
  0xff,0xff,0xff,0xff,0xbf,0xdd,0xdb,0x6e,0xab,0x6f,0x5b,0xdf,0x76,
  0x6b,0xbd,0xdb,0xff,0xff,0xff,0xff,0x7f,0x7b,0xbf,0xda,0xd6,0xcf,
  0xb6,0x5f,0xdb,0xfa,0xf7,0xee,0xff,0xff,0xff,0xff,0x7f,0x6e,0x60,
  0xb6,0xdd,0xdf,0xad,0xdf,0xb6,0xd3,0xae,0xe7,0xff,0xff,0xff,0xff,
  0xff,0xde,0x0f,0xdb,0xd6,0x5f,0xbb,0x9f,0x6d,0xf5,0xfd,0xf6,0xff,
  0xff,0xff,0xff,0xff,0xf5,0x76,0x6d,0xdb,0xd8,0x96,0xb0,0xdb,0xb7,
  0xab,0xfb,0xff,0xff,0xff,0xff,0xff,0xdb,0xbb,0xdb,0xd6,0x58,0xbd,
  0x50,0x6d,0x05,0xfe,0xf9,0xff,0xff,0xff,0xff,0xff,0x67,0x3f,0x6d,
  0x5f,0xd2,0xd7,0xd2,0xdb,0xee,0xdb,0xfc,0xff,0xff,0xff,0xff,0xff,
  0xcf,0xb5,0xb6,0x41,0x10,0xa0,0x50,0xb4,0x65,0x77,0xff,0xff,0xff,
  0xff,0xff,0xff,0x3f,0xaf,0xed,0x9a,0xca,0x9f,0x94,0x6e,0xef,0x9d,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x38,0x5b,0xb7,0x78,0xf0,0x6b,
  0xb5,0xa5,0xd7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x47,0xf6,0x5a,
  0x1f,0xf4,0xd7,0xdb,0xee,0xf2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0x7f,0x5b,0xb7,0x9f,0x60,0xb7,0xb6,0xad,0xfc,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0x7f,0xbd,0xad,0x36,0xf2,0x65,0x6d,0x83,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0x0f,0x40,0xdb,0xfd,0x7e,0xef,0xf7,
  0xf6,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0x5f,0x80,0xfa,
  0x5b,0x02,0x00,0x69,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,
  0xeb,0x77,0xc7,0xaf,0x3f,0x7f,0x59,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0x5e,0x79,0x0f,0xd0,0x71,0xd4,0xfb,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xea,0x80,0xdb,0xd7,0x8f,0xbf,0xfc,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0a,0xf5,0xbe,0xac,
  0x3f,0x68,0xfd,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x2f,0xe8,
  0xf6,0xbf,0xeb,0xbd,0xd3,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xef,0xbb,0xcf,0x2d,0xf2,0xcf,0x16,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xd3,0x9a,0xff,0xbc,0xab,0x6d,0xfc,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb7,0x35,0xf7,0xef,0x76,
  0x9b,0xfb,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xcf,0x6e,
  0xfe,0xfb,0xab,0xcd,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0x9f,0xdb,0x69,0xff,0x74,0xe7,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0x7f,0xb6,0xc2,0x0f,0xed,0xf8,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xd8,0x3f,0xe0,0x36,0xfe,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x63,0xd5,
  0x5f,0x9b,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0x1f,0x7d,0xf5,0xe2,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0x80,0x0a,0xfe,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0xf5,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};

const unsigned char hijoy[]U8X8_PROGMEM =  { 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x8f,0xff,0xff,0xff,0xff,0xf8,0xff,0xff,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x83,0xff,0xff,0xff,0x7f,0xf8,0xff,0xff,0x1f,0xff,0xff,0xff,0xff,0x03,0xf8,0xff,0xf1,0xff,0xff,0xff,0x3f,0xfc,0xff,0xff,0x0f,0xff,0xff,0xff,0xff,0xe0,0xf0,0x7f,0xf8,0xff,0xff,0xff,0x0f,0xfc,0xff,0xff,0x8f,0xff,0xff,0xff,0x7f,0xf8,0xe1,0x7f,0xfc,0xff,0xff,0xff,0x03,0xfc,0xff,0xff,0x87,0xff,0xff,0xff,0x3f,0xfe,0xe3,0x3f,0xfc,0xff,0xff,0xff,0x10,0xfe,0xff,0xff,0xc7,0xff,0xff,0xff,0x3f,0x9e,0xe3,0x3f,0x7e,0xff,0xff,0x3f,0x18,0xfe,0xff,0xff,0xc7,0xff,0xff,0xff,0x3f,0x1e,0xe3,0x1f,0x3e,0xff,0xff,0x1f,0x0e,0xfe,0xff,0xff,0xc3,0xff,0xff,0xff,0x3f,0x9e,0xe1,0x1f,0x1f,0xff,0xff,0x87,0x0f,0xff,0xff,0xff,0xe3,0xff,0xff,0xff,0x7f,0x8c,0xe1,0x0f,0x1f,0xff,0xff,0xc3,0x0f,0xff,0xff,0xff,0xe1,0xff,0xff,0xff,0xff,0xc0,0xf1,0x8f,0x9f,0xff,0xff,0xf0,0x07,0xff,0xff,0xff,0xf1,0xff,0xff,0xff,0xff,0x07,0xf0,0x87,0xff,0xff,0x7f,0xf8,0x87,0xff,0xff,0xff,0xf1,0xff,0xff,0xff,0xff,0x03,0xc0,0x87,0xff,0xff,0x7f,0xfc,0x87,0xff,0xff,0xff,0xf8,0xff,0xff,0xff,0xff,0x71,0x00,0xc7,0xff,0xff,0x3f,0x1c,0xc3,0x83,0x3f,0x9f,0xf8,0xff,0xff,0xff,0xff,0x71,0x18,0xc0,0xe1,0xff,0x3f,0x1c,0xc2,0x01,0x1f,0x8f,0xf8,0xff,0xff,0xff,0xff,0x21,0x7c,0xc0,0xe0,0xff,0x3f,0x7c,0xc2,0x10,0x0f,0x07,0xfc,0xff,0xff,0xff,0xff,0x3f,0xfc,0x60,0xf0,0xff,0x3f,0x7c,0x60,0x08,0x07,0x03,0xfc,0xff,0xff,0xff,0xff,0x1f,0xfe,0x20,0x38,0xff,0x7f,0x18,0x60,0x8c,0x81,0x41,0xfc,0xff,0xff,0xff,0xff,0x1f,0xfe,0x21,0x18,0xff,0xff,0x80,0x20,0x0c,0x80,0x40,0xfe,0xff,0xff,0xff,0xff,0x0f,0xff,0x61,0x08,0xff,0xff,0xff,0x00,0x0e,0x46,0xc0,0xff,0xff,0xff,0xff,0xff,0x0f,0xff,0x71,0x20,0xfe,0xff,0xff,0x20,0xe0,0x07,0x22,0xfe,0xff,0xff,0xff,0xff,0x0f,0xff,0x71,0x30,0xff,0xff,0x7f,0x60,0xf0,0x87,0x21,0xfe,0xff,0xff,0xff,0xff,0x9f,0xff,0xf1,0x9f,0xff,0x7f,0x00,0xf0,0xff,0xe7,0xf1,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf3,0xff,0xff,0x07,0x00,0xf0,0xff,0xff,0xf0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc1,0x3f,0xc0,0xff,0xff,0xf0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0xf8,0x3f,0x8c,0xff,0xff,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x1f,0xfc,0x1f,0x8c,0xff,0x7f,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0f,0xff,0x1f,0x9e,0xff,0x3f,0xfc,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x87,0xff,0x0f,0x82,0xff,0x3f,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc7,0xff,0x0f,0xc3,0xff,0x1f,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe3,0xff,0x07,0xff,0xff,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe3,0xff,0x87,0xff,0xff,0x8f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe3,0xff,0xc3,0xff,0xff,0xc7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf1,0xff,0xc1,0xff,0xff,0xe3,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf3,0xff,0xe1,0xff,0xff,0xf0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf3,0x7f,0xf0,0xff,0x0f,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe3,0x7f,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc7,0x1f,0xfc,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0f,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x1f,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff };
const unsigned char happy[]U8X8_PROGMEM =  { 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x8f,0xff,0xff,0xff,0xff,0xf8,0xff,0xff,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x83,0xff,0xff,0xff,0x7f,0xf8,0xff,0xff,0x1f,0xff,0xff,0xff,0xff,0x03,0xf8,0xff,0xf1,0xff,0xff,0xff,0x3f,0xfc,0xff,0xff,0x0f,0xff,0xff,0xff,0xff,0xe0,0xf0,0x7f,0xf8,0xff,0xff,0xff,0x0f,0xfc,0xff,0xff,0x8f,0xff,0xff,0xff,0x7f,0xf8,0xe1,0x7f,0xfc,0xff,0xff,0xff,0x03,0xfc,0xff,0xff,0x87,0xff,0xff,0xff,0x3f,0xfe,0xe3,0x3f,0xfc,0xff,0xff,0xff,0x10,0xfe,0xff,0xff,0xc7,0xff,0xff,0xff,0x3f,0x9e,0xe3,0x3f,0x7e,0xff,0xff,0x3f,0x18,0xfe,0xff,0xff,0xc7,0xff,0xff,0xff,0x3f,0x1e,0xe3,0x1f,0x3e,0xff,0xff,0x1f,0x0e,0xfe,0xff,0xff,0xc3,0xff,0xff,0xff,0x3f,0x9e,0xe1,0x1f,0x1f,0xff,0xff,0x87,0x0f,0xff,0xff,0xff,0xe3,0xff,0xff,0xff,0x7f,0x8c,0xe1,0x0f,0x1f,0xff,0xff,0xc3,0x0f,0xff,0xff,0xff,0xe1,0xff,0xff,0xff,0xff,0xc0,0xf1,0x8f,0x9f,0xff,0xff,0xf0,0x07,0xff,0xff,0xff,0xf1,0xff,0xff,0xff,0xff,0x07,0xf0,0x87,0xff,0xff,0x7f,0xf8,0x87,0xff,0xff,0xff,0xf1,0xff,0xff,0xff,0xff,0x03,0xc0,0x87,0xff,0xff,0x7f,0xfc,0x87,0xff,0xff,0xff,0xf8,0xff,0xff,0xff,0xff,0x71,0x00,0xc7,0xff,0xff,0x3f,0x1c,0xc3,0x83,0x3f,0x9f,0xf8,0xff,0xff,0xff,0xff,0x71,0x18,0xc0,0xe1,0xff,0x3f,0x1c,0xc2,0x01,0x1f,0x8f,0xf8,0xff,0xff,0xff,0xff,0x21,0x7c,0xc0,0xe0,0xff,0x3f,0x7c,0xc2,0x10,0x0f,0x07,0xfc,0xff,0xff,0xff,0xff,0x3f,0xfc,0x60,0xf0,0xff,0x3f,0x7c,0x60,0x08,0x07,0x03,0xfc,0xff,0xff,0xff,0xff,0x1f,0xfe,0x20,0x38,0xff,0x7f,0x18,0x60,0x8c,0x81,0x41,0xfc,0xff,0xff,0xff,0xff,0x1f,0xfe,0x21,0x18,0xff,0xff,0x80,0x20,0x0c,0x80,0x40,0xfe,0xff,0xff,0xff,0xff,0x0f,0xff,0x61,0x08,0xff,0xff,0xff,0x00,0x0e,0x46,0xc0,0xff,0xff,0xff,0xff,0xff,0x0f,0xff,0x71,0x20,0xfe,0xff,0xff,0x20,0xe0,0x07,0x22,0xfe,0xff,0xff,0xff,0xff,0x0f,0xff,0x71,0x30,0xff,0xff,0x7f,0x60,0xf0,0x87,0x21,0xfe,0xff,0xff,0xff,0xff,0x9f,0xff,0xf1,0x9f,0xff,0x7f,0x00,0xf0,0xff,0xe7,0xf1,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf3,0xff,0xff,0x07,0x00,0xf0,0xff,0xff,0xf0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc1,0x3f,0xc0,0xff,0xff,0xf0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0xf8,0x3f,0x8c,0xff,0xff,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x1f,0xfc,0x1f,0x8c,0xff,0x7f,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0f,0xff,0x1f,0x9e,0xff,0x3f,0xfc,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x87,0xff,0x0f,0x82,0xff,0x3f,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc7,0xff,0x0f,0xc3,0xff,0x1f,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe3,0xff,0x07,0xff,0xff,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe3,0xff,0x87,0xff,0xff,0x8f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe3,0xff,0xc3,0xff,0xff,0xc7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf1,0xff,0xc1,0xff,0xff,0xe3,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf3,0xff,0xe1,0xff,0xff,0xf0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf3,0x7f,0xf0,0xff,0x0f,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe3,0x7f,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc7,0x1f,0xfc,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0f,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x1f,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff };
const unsigned char unhappy[]U8X8_PROGMEM =  { 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x8f,0xff,0xff,0xff,0xff,0xf8,0xff,0xff,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x83,0xff,0xff,0xff,0x7f,0xf8,0xff,0xff,0x1f,0xff,0xff,0xff,0xff,0x03,0xf8,0xff,0xf1,0xff,0xff,0xff,0x3f,0xfc,0xff,0xff,0x0f,0xff,0xff,0xff,0xff,0xe0,0xf0,0x7f,0xf8,0xff,0xff,0xff,0x0f,0xfc,0xff,0xff,0x8f,0xff,0xff,0xff,0x7f,0xf8,0xe1,0x7f,0xfc,0xff,0xff,0xff,0x03,0xfc,0xff,0xff,0x87,0xff,0xff,0xff,0x3f,0xfe,0xe3,0x3f,0xfc,0xff,0xff,0xff,0x10,0xfe,0xff,0xff,0xc7,0xff,0xff,0xff,0x3f,0x9e,0xe3,0x3f,0x7e,0xff,0xff,0x3f,0x18,0xfe,0xff,0xff,0xc7,0xff,0xff,0xff,0x3f,0x1e,0xe3,0x1f,0x3e,0xff,0xff,0x1f,0x0e,0xfe,0xff,0xff,0xc3,0xff,0xff,0xff,0x3f,0x9e,0xe1,0x1f,0x1f,0xff,0xff,0x87,0x0f,0xff,0xff,0xff,0xe3,0xff,0xff,0xff,0x7f,0x8c,0xe1,0x0f,0x1f,0xff,0xff,0xc3,0x0f,0xff,0xff,0xff,0xe1,0xff,0xff,0xff,0xff,0xc0,0xf1,0x8f,0x9f,0xff,0xff,0xf0,0x07,0xff,0xff,0xff,0xf1,0xff,0xff,0xff,0xff,0x07,0xf0,0x87,0xff,0xff,0x7f,0xf8,0x87,0xff,0xff,0xff,0xf1,0xff,0xff,0xff,0xff,0x03,0xc0,0x87,0xff,0xff,0x7f,0xfc,0x87,0xff,0xff,0xff,0xf8,0xff,0xff,0xff,0xff,0x71,0x00,0xc7,0xff,0xff,0x3f,0x1c,0xc3,0x83,0x3f,0x9f,0xf8,0xff,0xff,0xff,0xff,0x71,0x18,0xc0,0xe1,0xff,0x3f,0x1c,0xc2,0x01,0x1f,0x8f,0xf8,0xff,0xff,0xff,0xff,0x21,0x7c,0xc0,0xe0,0xff,0x3f,0x7c,0xc2,0x10,0x0f,0x07,0xfc,0xff,0xff,0xff,0xff,0x3f,0xfc,0x60,0xf0,0xff,0x3f,0x7c,0x60,0x08,0x07,0x03,0xfc,0xff,0xff,0xff,0xff,0x1f,0xfe,0x20,0x38,0xff,0x7f,0x18,0x60,0x8c,0x81,0x41,0xfc,0xff,0xff,0xff,0xff,0x1f,0xfe,0x21,0x18,0xff,0xff,0x80,0x20,0x0c,0x80,0x40,0xfe,0xff,0xff,0xff,0xff,0x0f,0xff,0x61,0x08,0xff,0xff,0xff,0x00,0x0e,0x46,0xc0,0xff,0xff,0xff,0xff,0xff,0x0f,0xff,0x71,0x20,0xfe,0xff,0xff,0x20,0xe0,0x07,0x22,0xfe,0xff,0xff,0xff,0xff,0x0f,0xff,0x71,0x30,0xff,0xff,0x7f,0x60,0xf0,0x87,0x21,0xfe,0xff,0xff,0xff,0xff,0x9f,0xff,0xf1,0x9f,0xff,0x7f,0x00,0xf0,0xff,0xe7,0xf1,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf3,0xff,0xff,0x07,0x00,0xf0,0xff,0xff,0xf0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc1,0x3f,0xc0,0xff,0xff,0xf0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0xf8,0x3f,0x8c,0xff,0xff,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x1f,0xfc,0x1f,0x8c,0xff,0x7f,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0f,0xff,0x1f,0x9e,0xff,0x3f,0xfc,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x87,0xff,0x0f,0x82,0xff,0x3f,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc7,0xff,0x0f,0xc3,0xff,0x1f,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe3,0xff,0x07,0xff,0xff,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe3,0xff,0x87,0xff,0xff,0x8f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe3,0xff,0xc3,0xff,0xff,0xc7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf1,0xff,0xc1,0xff,0xff,0xe3,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf3,0xff,0xe1,0xff,0xff,0xf0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf3,0x7f,0xf0,0xff,0x0f,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xe3,0x7f,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc7,0x1f,0xfc,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0f,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x1f,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff };

//定义温湿度区域
#include <SimpleDHT.h>
int pinDHT11 = 2;  //SD2引脚
SimpleDHT11 dht11(pinDHT11);
byte humi_read = 0, temp_read = 0;


//超声波模块
#define Trig 13 //引脚Tring 连接 IO D7
#define Echo 12 //引脚Echo 连接 IO D6

//音乐模块
#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978
#define REST 0
// change this to make the song slower or faster
int tempo = 144;
// change this to whichever pin you want to use
// 使用引脚D5
int buzzer = 14;  

void playHP(){
  int melody[] = {
  // Hedwig's theme fromn the Harry Potter Movies
  // Socre from https://musescore.com/user/3811306/scores/4906610
  
  REST, 2, NOTE_D4, 4,
  NOTE_G4, -4, NOTE_AS4, 8, NOTE_A4, 4,
  NOTE_G4, 2, NOTE_D5, 4,
  NOTE_C5, -2, 
  NOTE_A4, -2,
  NOTE_G4, -4, NOTE_AS4, 8, NOTE_A4, 4,
  NOTE_F4, 2, NOTE_GS4, 4,
  NOTE_D4, -1, 
  NOTE_D4, 4,

  NOTE_G4, -4, NOTE_AS4, 8, NOTE_A4, 4, //10
  NOTE_G4, 2, NOTE_D5, 4,
  NOTE_F5, 2, NOTE_E5, 4,
  NOTE_DS5, 2, NOTE_B4, 4,
  NOTE_DS5, -4, NOTE_D5, 8, NOTE_CS5, 4,
  NOTE_CS4, 2, NOTE_B4, 4,
  NOTE_G4, -1,
  NOTE_AS4, 4,
     
  NOTE_D5, 2, NOTE_AS4, 4,//18
  NOTE_D5, 2, NOTE_AS4, 4,
  NOTE_DS5, 2, NOTE_D5, 4,
  NOTE_CS5, 2, NOTE_A4, 4,
  NOTE_AS4, -4, NOTE_D5, 8, NOTE_CS5, 4,
  NOTE_CS4, 2, NOTE_D4, 4,
  NOTE_D5, -1, 
  REST,4, NOTE_AS4,4,  

  NOTE_D5, 2, NOTE_AS4, 4,//26
  NOTE_D5, 2, NOTE_AS4, 4,
  NOTE_F5, 2, NOTE_E5, 4,
  NOTE_DS5, 2, NOTE_B4, 4,
  NOTE_DS5, -4, NOTE_D5, 8, NOTE_CS5, 4,
  NOTE_CS4, 2, NOTE_AS4, 4,
  NOTE_G4, -1, 
};
  // sizeof gives the number of bytes, each int value is composed of two bytes (16 bits)
  // there are two values per note (pitch and duration), so for each note there are four bytes
  int notes = sizeof(melody) / sizeof(melody[0]) / 2;
  
  // this calculates the duration of a whole note in ms (60s/tempo)*4 beats
  int wholenote = (60000 * 4) / tempo;
  
  int divider = 0, noteDuration = 0;

    // iterate over the notes of the melody. 
  // Remember, the array is twice the number of notes (notes + durations)
  for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {

    // calculates the duration of each note
    divider = melody[thisNote + 1];
    if (divider > 0) {
      // regular note, just proceed
      noteDuration = (wholenote) / divider;
    } else if (divider < 0) {
      // dotted notes are represented with negative durations!!
      noteDuration = (wholenote) / abs(divider);
      noteDuration *= 1.5; // increases the duration in half for dotted notes
    }

    // we only play the note for 90% of the duration, leaving 10% as a pause
    tone(buzzer, melody[thisNote], noteDuration*0.9);

    // Wait for the specief duration before playing the next note.
    delay(noteDuration);
    
    // stop the waveform generation before the next note.
    noTone(buzzer);
  }
  
}

void playSN(){
  int melody[] = {

  // Silent Night, Original Version
  // Score available at https://musescore.com/marcsabatella/scores/3123436

  NOTE_G4,-4, NOTE_A4,8, NOTE_G4,4,
  NOTE_E4,-2, 
  NOTE_G4,-4, NOTE_A4,8, NOTE_G4,4,
  NOTE_E4,-2, 
  NOTE_D5,2, NOTE_D5,4,
  NOTE_B4,-2,
  NOTE_C5,2, NOTE_C5,4,
  NOTE_G4,-2,

  NOTE_A4,2, NOTE_A4,4,
  NOTE_C5,-4, NOTE_B4,8, NOTE_A4,4,
  NOTE_G4,-4, NOTE_A4,8, NOTE_G4,4,
  NOTE_E4,-2, 
  NOTE_A4,2, NOTE_A4,4,
  NOTE_C5,-4, NOTE_B4,8, NOTE_A4,4,
  NOTE_G4,-4, NOTE_A4,8, NOTE_G4,4,
  NOTE_E4,-2, 
  
  NOTE_D5,2, NOTE_D5,4,
  NOTE_F5,-4, NOTE_D5,8, NOTE_B4,4,
  NOTE_C5,-2,
  NOTE_E5,-2,
  NOTE_C5,4, NOTE_G4,4, NOTE_E4,4,
  NOTE_G4,-4, NOTE_F4,8, NOTE_D4,4,
  NOTE_C4,-2,
  NOTE_C4,-1, 
};
  // sizeof gives the number of bytes, each int value is composed of two bytes (16 bits)
  // there are two values per note (pitch and duration), so for each note there are four bytes
  int notes = sizeof(melody) / sizeof(melody[0]) / 2;
  
  // this calculates the duration of a whole note in ms (60s/tempo)*4 beats
  int wholenote = (60000 * 4) / tempo;
  
  int divider = 0, noteDuration = 0;

    // iterate over the notes of the melody. 
  // Remember, the array is twice the number of notes (notes + durations)
  for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {

    // calculates the duration of each note
    divider = melody[thisNote + 1];
    if (divider > 0) {
      // regular note, just proceed
      noteDuration = (wholenote) / divider;
    } else if (divider < 0) {
      // dotted notes are represented with negative durations!!
      noteDuration = (wholenote) / abs(divider);
      noteDuration *= 1.5; // increases the duration in half for dotted notes
    }

    // we only play the note for 90% of the duration, leaving 10% as a pause
    tone(buzzer, melody[thisNote], noteDuration*0.9);

    // Wait for the specief duration before playing the next note.
    delay(noteDuration);
    
    // stop the waveform generation before the next note.
    noTone(buzzer);
  }
  
}

void playSW(){
  int melody[] = {
  
  // Dart Vader theme (Imperial March) - Star wars 
  // Score available at https://musescore.com/user/202909/scores/1141521
  // The tenor saxophone part was used
  
  NOTE_AS4,8, NOTE_AS4,8, NOTE_AS4,8,//1
  NOTE_F5,2, NOTE_C6,2,
  NOTE_AS5,8, NOTE_A5,8, NOTE_G5,8, NOTE_F6,2, NOTE_C6,4,  
  NOTE_AS5,8, NOTE_A5,8, NOTE_G5,8, NOTE_F6,2, NOTE_C6,4,  
  NOTE_AS5,8, NOTE_A5,8, NOTE_AS5,8, NOTE_G5,2, NOTE_C5,8, NOTE_C5,8, NOTE_C5,8,
  NOTE_F5,2, NOTE_C6,2,
  NOTE_AS5,8, NOTE_A5,8, NOTE_G5,8, NOTE_F6,2, NOTE_C6,4,  
  
  NOTE_AS5,8, NOTE_A5,8, NOTE_G5,8, NOTE_F6,2, NOTE_C6,4, //8  
  NOTE_AS5,8, NOTE_A5,8, NOTE_AS5,8, NOTE_G5,2, NOTE_C5,-8, NOTE_C5,16, 
  NOTE_D5,-4, NOTE_D5,8, NOTE_AS5,8, NOTE_A5,8, NOTE_G5,8, NOTE_F5,8,
  NOTE_F5,8, NOTE_G5,8, NOTE_A5,8, NOTE_G5,4, NOTE_D5,8, NOTE_E5,4,NOTE_C5,-8, NOTE_C5,16,
  NOTE_D5,-4, NOTE_D5,8, NOTE_AS5,8, NOTE_A5,8, NOTE_G5,8, NOTE_F5,8,
  
  NOTE_C6,-8, NOTE_G5,16, NOTE_G5,2, REST,8, NOTE_C5,8,//13
  NOTE_D5,-4, NOTE_D5,8, NOTE_AS5,8, NOTE_A5,8, NOTE_G5,8, NOTE_F5,8,
  NOTE_F5,8, NOTE_G5,8, NOTE_A5,8, NOTE_G5,4, NOTE_D5,8, NOTE_E5,4,NOTE_C6,-8, NOTE_C6,16,
  NOTE_F6,4, NOTE_DS6,8, NOTE_CS6,4, NOTE_C6,8, NOTE_AS5,4, NOTE_GS5,8, NOTE_G5,4, NOTE_F5,8,
  NOTE_C6,1
  
};
  // sizeof gives the number of bytes, each int value is composed of two bytes (16 bits)
  // there are two values per note (pitch and duration), so for each note there are four bytes
  int notes = sizeof(melody) / sizeof(melody[0]) / 2;
  
  // this calculates the duration of a whole note in ms (60s/tempo)*4 beats
  int wholenote = (60000 * 4) / tempo;
  
  int divider = 0, noteDuration = 0;

    // iterate over the notes of the melody. 
  // Remember, the array is twice the number of notes (notes + durations)
  for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {

    // calculates the duration of each note
    divider = melody[thisNote + 1];
    if (divider > 0) {
      // regular note, just proceed
      noteDuration = (wholenote) / divider;
    } else if (divider < 0) {
      // dotted notes are represented with negative durations!!
      noteDuration = (wholenote) / abs(divider);
      noteDuration *= 1.5; // increases the duration in half for dotted notes
    }

    // we only play the note for 90% of the duration, leaving 10% as a pause
    tone(buzzer, melody[thisNote], noteDuration*0.9);

    // Wait for the specief duration before playing the next note.
    delay(noteDuration);
    
    // stop the waveform generation before the next note.
    noTone(buzzer);
  }
  
}



//测量距离并且显示
void Distance(){
  float cm; //距离变量
  float temp; //
   //给Trig发送一个低高低的短时间脉冲,触发测距
  digitalWrite(Trig, LOW); //给Trig发送一个低电平
  delayMicroseconds(2);    //等待 2微妙
  digitalWrite(Trig,HIGH); //给Trig发送一个高电平
  delayMicroseconds(10);    //等待 10微妙
  digitalWrite(Trig, LOW); //给Trig发送一个低电平
  
  temp = float(pulseIn(Echo, HIGH)); //存储回波等待时间,
  //pulseIn函数会等待引脚变为HIGH,开始计算时间,再等待变为LOW并停止计时
  //返回脉冲的长度
  
  //声速是:340m/1s 换算成 34000cm / 1000000μs => 34 / 1000
  //因为发送到接收,实际是相同距离走了2回,所以要除以2
  //距离(厘米)  =  (回波时间 * (34 / 1000)) / 2
  //简化后的计算公式为 (回波时间 * 17)/ 1000
  
  cm = (temp * 17 )/1000; //把回波时间换算成cm
 
  Serial.print("Echo =");
  Serial.print(temp);//串口输出等待时间的原始数据
  Serial.print(" | | Distance = ");
  Serial.print(cm);//串口输出距离换算成cm的结果
  Serial.println("cm");
  u8g2.clearBuffer();          // clear the internal memory
  u8g2.setFont(u8g2_font_ncenB08_tr); // choose a suitable font
  u8g2.drawStr(20,40,"The distance is");  // write something to the internal memory
  u8g2.setCursor(20,60);
  u8g2.print(cm);
  u8g2.drawStr(40,60,"cm");  // write something to the internal memory
  u8g2.sendBuffer();          // transfer internal memory to the display
  
}

void Temperature(){
  // read without samples.
  byte temperature = 0;
  byte humidity = 0;
  int err = SimpleDHTErrSuccess;
  if ((err = dht11.read(&temperature, &humidity, NULL)) != SimpleDHTErrSuccess) {
    Serial.print("Read DHT11 failed, err="); Serial.print(SimpleDHTErrCode(err));
    Serial.print(","); Serial.println(SimpleDHTErrDuration(err)); delay(1000);
    return;
  }
  
  Serial.print("Sample OK: ");
  Serial.print((int)temperature); Serial.print(" *C, "); 
  Serial.print((int)humidity); Serial.println(" H");
  u8g2.clearBuffer();          // clear the internal memory
  u8g2.setFont(u8g2_font_ncenB08_tr); // choose a suitable font
  u8g2.drawStr(20,40,"The temperature is");  // write something to the internal memory
  u8g2.setCursor(20,50);
  u8g2.print((int)temperature);
  u8g2.drawStr(20,60,"*C");  // write something to the internal memory
  u8g2.sendBuffer();          // transfer internal memory to the display
  delay(5000);
  showhijoy();
}

void Humidity(){
  // read without samples.
  byte temperature = 0;
  byte humidity = 0;
  int err = SimpleDHTErrSuccess;
  if ((err = dht11.read(&temperature, &humidity, NULL)) != SimpleDHTErrSuccess) {
    Serial.print("Read DHT11 failed, err="); Serial.print(SimpleDHTErrCode(err));
    Serial.print(","); Serial.println(SimpleDHTErrDuration(err)); delay(1000);
    return;
  }
  
  Serial.print("Sample OK: ");
  Serial.print((int)temperature); Serial.print(" *C, "); 
  Serial.print((int)humidity); Serial.println(" H");
  u8g2.clearBuffer();          // clear the internal memory
  u8g2.setFont(u8g2_font_ncenB08_tr); // choose a suitable font
  u8g2.drawStr(20,40,"The humidity is");  // write something to the internal memory
  u8g2.setCursor(20,50);
  u8g2.print((int)temperature);
  u8g2.drawStr(20,60,"H");  // write something to the internal memory
  u8g2.sendBuffer();          // transfer internal memory to the display
  delay(5000);
  showhijoy();
}

//显示屏代码
void showhijoy(){
  u8g2.clearBuffer(); // 清空显示缓冲区     
  u8g2.drawXBMP( 0 , 0 , 128 , 64 , hijoy );     //128,64为图片尺寸，根据你的图片尺寸修改
  u8g2.sendBuffer();  // 显示缓冲区内容
}

void showhappy(){
  u8g2.clearBuffer(); // 清空显示缓冲区     
  u8g2.drawXBMP( 0 , 0 , 128 , 64 , happy );     //128,64为图片尺寸，根据你的图片尺寸修改
  u8g2.sendBuffer();  // 显示缓冲区内容
}

void showunhappy(){
  u8g2.clearBuffer(); // 清空显示缓冲区     
  u8g2.drawXBMP( 0 , 0 , 128 , 64 , unhappy );     //128,64为图片尺寸，根据你的图片尺寸修改
  u8g2.sendBuffer();  // 显示缓冲区内容
}

/*******************************************/

void setup() {
    // 初始化串口
    Serial.begin(115200);

    //u8g2初始化
    u8g2.begin(); //初始化
    u8g2.clearBuffer(); //清空显示缓冲区
    showhijoy();

    //超声波模块
    pinMode(Trig, OUTPUT);
    pinMode(Echo, INPUT);

    // 初始化有LED的IO
    pinMode(LED_BUILTIN, OUTPUT);
    digitalWrite(LED_BUILTIN, HIGH);


    //网页代码
    webPage += "<div align=\"center\"><h1>My Musice Player</h1>";
    webPage += "<a href=\"HarryPotter\"><button style=\"height:200px;width:300px\"><font size=\"20\">HarryPotter</font></button></a>";
    webPage += "<a href=\"StarWars\"><button style=\"height:200px;width:300px\"><font size=\"20\">StarWars</font></button></a>";
    webPage += "<a href=\"SilentNight\"><button style=\"height:200px;width:300px\"><font size=\"20\">SilentNight</font></button></a><br>";
    webPage += "<div align=\"center\"><h1>Functions</h1>";
    webPage += "<a href=\"Distance\"><button style=\"height:200px;width:300px\"><font size=\"20\">Distance</font></button></a>";
    webPage += "<a href=\"Temperature\"><button style=\"height:200px;width:300px\"><font size=\"20\">Temperature</font></button></a>";
    webPage += "<a href=\"Humidity\"><button style=\"height:200px;width:300px\"><font size=\"20\">Humidity</font></button></a><br>";

    WiFi.softAP(ssid, password);
   
    server.on("/", []() {
      server.send(200, "text/html", webPage);
    });
    server.on("/HarryPotter", []() {
      server.send(200, "text/html", webPage);
      HarryPotter();
    });
    server.on("/StarWars", []() {
      server.send(200, "text/html", webPage);
      StarWars();
    });
    server.on("/SilentNight", []() {
      server.send(200, "text/html", webPage);
      SilentNight();
    });
    
    server.on("/Distance", []() {
    server.send(200, "text/html", webPage);
    Distance();
    });
    server.on("/Temperature", []() {
      server.send(200, "text/html", webPage);
      Temperature();
    });
    server.on("/Humidity", []() {
      server.send(200, "text/html", webPage);
      Humidity();
    });
  
    server.begin();
    Serial.println("HTTP server started");
}  

   
/*******************************************/
void HarryPotter() {
  Serial.println("play HarryPotter");
  playHP();
  Serial.println("play HarryPotter finished");
}

void StarWars() {
  Serial.println("play StarWars");
  playSW();
  Serial.println("play StarWars finished");  
}
 
void SilentNight() {
  Serial.println("play SilentNight");
  playSN();
  Serial.println("play SilentNight finished");
}


void loop() {
    server.handleClient();
}